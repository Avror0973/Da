from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.builtin import Command
from keyboards.inline.choice_buttons import choice

from loader import dp, db



@dp.message_handler(Command("adress"))
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —á—Ç–æ–±—ã –º—ã –µ–≥–æ –∑–∞–ø–æ–º–Ω–∏–ª–∏ –∏ –≤–∞–º "
                         "–Ω–µ –ø—Ä–∏—Ö–æ–¥–∏–ª–æ—Å—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –µ–≥–æ –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∏ –∑–∞–∫–∞–∑–µ."
                         "\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –Ω–∞ /cancel")
    await state.set_state("email")



@dp.message_handler(state="email")
async def enter_email(message: types.Message, state: FSMContext):
    email = message.text
    if email == '/cancel':
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
        await state.finish()
    else:
        db.update_user_email(email=email, id=message.from_user.id)
        user = db.select_user(id=message.from_user.id)
        user_data = []
        for i in user[1:]:
            if i == None:
                user_data.append("- –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                user_data.append(i)
        text = (
            "<b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>",
            f"üë§ –ò–º—è: {user_data[0]}",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {user_data[1]}",
            f"üì™ –ê–¥—Ä–µ—Å: {user_data[2]}"
        )
        await message.answer("\n".join(text), parse_mode='HTML', reply_markup=choice)
        await state.finish()


@dp.message_handler(Command("number"))
async def bot_start(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏ –Ω–∞ /cancel")
    await state.set_state("number")


@dp.message_handler(state="number")
async def enter_email(message: types.Message, state: FSMContext):
    number = message.text
    if number == '/cancel':
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=choice)
        await state.finish()
    else:
        db.update_user_number(number=number, id=message.from_user.id)
        user = db.select_user(id=message.from_user.id)
        user_data = []
        for i in user[1:]:
            if i == None:
                user_data.append("- –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            else:
                user_data.append(i)
        text = (
            "<b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>",
            f"üë§ –ò–º—è: {user_data[0]}",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {user_data[1]}",
            f"üì™ –ê–¥—Ä–µ—Å: {user_data[2]}"
        )
        await message.answer("\n".join(text), parse_mode='HTML', reply_markup=choice)
        await state.finish()
