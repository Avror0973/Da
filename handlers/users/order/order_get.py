from aiogram import types
from loader import dp, bot
from aiogram.dispatcher import FSMContext
import time
from keyboards.inline.choice_consent import consent
from data.menu_pictures import menu_pics
from data.prices import sushi_price



menu_list = ["–ë–µ—à–µ–Ω—ã–π –ª–æ—Å–æ—Å—å", "–ì–æ—Ä—è—á–∏–π —à–∏–∫", "–ë–∞–Ω–∑–∞–π", "–ß—ë—Ä–Ω—ã–π —Å–∞–º—É—Ä–∞–π", "–ö—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–ª–ª—ã"]

user_order = []  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ —Å—é–¥–∞
user_quantity = [] # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª-–≤–æ
text = ''  # —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª—é–¥–∞
user_choice_quantity = dict() # –°–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–±–∏—Ä–∞–µ–º –≤—ã–±–æ—Ä –∏ –∫–æ–ª-–≤–æ


async def text_apper(order_lst, quan_lst):
    global text
    text = '<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n'
    for i in range(len(user_order)):
        global user_choice_quantity
        user_choice_quantity[order_lst[i]] = quan_lst[i]
        text = f"""<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n
{user_choice_quantity.items()}\n"""
        print(type(text))
    print(*user_choice_quantity.items(), sep='\n')



@dp.message_handler(text=menu_list)
async def menu_get(message: types.Message, state=FSMContext):
    quantity = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
    user_choice = message.text  # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_order.append(user_choice)
    await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.answer_photo(photo=f"{menu_pics[user_choice]}",
                               caption=f"üç£<b>{user_choice}</b>\n"
                                       f"–¶–µ–Ω–∞ {sushi_price[user_choice] * quantity}‚ÇΩ\n"
                                       f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –õ–æ—Å–æ—Å—å –∏ –¥—Ä—É–≥–æ–µ\n")
    await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    await state.set_state("consent")


@dp.message_handler(state="consent")
async def order_quantity(message: types.Message, state: FSMContext):
    quantity = message.text
    user_quantity.append(int(quantity))
    user_choice = user_order[0]
    await text_apper(user_order, user_quantity)
    if quantity.isdigit():
        await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.answer(text)
        # await message.answer(f"<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
        #                      f"<i>–ë–ª—é–¥–æ   -   –¶–µ–Ω–∞   -   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</i>\n\n"
        #                      f"{user_order[0]} - {sushi_price[user_choice]}‚ÇΩ - {user_quantity[0]}—à—Ç\n\n"
        #                      f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ - {int(quantity) * sushi_price[user_choice]}‚ÇΩ")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        time.sleep(0.5)
        await message.answer("–•–æ—Ç–∏—Ç–µ –µ—â–µ —á–µ–≥–æ –Ω–∏ –±—É–¥—å?", reply_markup=consent)
        await state.finish()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏")
        await state.set_state("consent")


@dp.callback_query_handler(text_contains="–û—Ñ–æ—Ä–º–∏—Ç—å")
async def order_quantity(message: types.Message, state: FSMContext):
    quantity = message.text
    user_choice = user_order[0]
    if quantity.isdigit():
        await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        time.sleep(0.5)
        await message.answer(f"<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n"
                             f"{user_order[0]} - {price[user_choice]}‚ÇΩ\n"
                             f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - {quantity}\n"
                             f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ - {int(quantity) * price[user_choice]}‚ÇΩ")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        time.sleep(0.5)
        await message.answer("–ú—ã –≤–∞–º –ø–æ–∑–≤–æ–Ω–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        await state.finish()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏")
        await state.set_state("quantity")
