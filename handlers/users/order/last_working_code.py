from aiogram.types import CallbackQuery, ReplyKeyboardRemove, Message
from keyboards.inline.choice_consent import consent
from loader import dp, bot
from aiogram.dispatcher import FSMContext
import time
from data.menu_pictures import menu_pics
from data.prices import sushi_price


menu_list = ["–ë–µ—à–µ–Ω—ã–π –ª–æ—Å–æ—Å—å", "–ì–æ—Ä—è—á–∏–π —à–∏–∫", "–ë–∞–Ω–∑–∞–π", "–ß—ë—Ä–Ω—ã–π —Å–∞–º—É—Ä–∞–π", "–ö—Ä–∞—Å–∏–≤—ã–µ —Ä–æ–ª–ª—ã"]
drink_list = ['Coca Cola', 'Fanta', 'Lipton', 'Lipton - –õ–∏–º–æ–Ω', 'Pepsi']



@dp.callback_query_handler(text_contains="menu")
async def get_menu(call: CallbackQuery, state=FSMContext):
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await call.message.delete_reply_markup()
    await call.answer(cache_time=60)
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ–π—Ç–∞ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    await state.update_data(choice=['–ì–æ—Ä—è—á–∏–π —à–∏–∫'], choice_quantity=[], total_price=[])
    # await state.update_data(choice={'choice_food': ['–ì–æ—Ä—è—á–∏–π —à–∏–∫'], 'choice_quantity': [], 'total_price': []})
    await call.message.answer("–í—ã–±–∏—Ä–∞–π—Ç–µüì≤", reply_markup=consent)


@dp.callback_query_handler(text_contains="basket")
async def show_basket(call: CallbackQuery, state=FSMContext):
    await call.message.delete_reply_markup()\
    # TODO —Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ä–∑–∏–Ω–æ–π
    # Work with state for basket
    data = await state.get_data()

    user_choice = data.get('choice')
    user_choice.append('sushi')
    await state.update_data(choice=user_choice)
    data2 = await state.get_data()
    print(data2)
    # print(data['choice_food'])
    #
    # data = await state.get_data()
    # choice = data.get('choice')

    await call.answer(cache_time=60)
    await call.message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", reply_markup=consent)


@dp.message_handler(text=menu_list)
@dp.message_handler(text=drink_list)
async def menu_get(message: Message, state=FSMContext):
    user_choice = message.text  # –í—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ó–∞–ø–∏—Å—å –≤ FSM or Redis
    await state.update_data(choice=user_choice)

    await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.answer_photo(photo=f"{menu_pics[user_choice]}",
                               caption=f"üç£<b>{user_choice}</b>\n"
                                       f"–¶–µ–Ω–∞ {sushi_price[user_choice]}‚ÇΩ\n"
                                       f"–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n")
    await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    await state.set_state("quantity")



@dp.message_handler(state="quantity")
async def order_quantity(message: Message, state: FSMContext):
    if message.text.isdigit():
        data = await state.get_data()
        quantity = message.text
        choice = data.get('choice')
        choice_price = sushi_price[choice]
        await bot.send_chat_action(chat_id=message.chat.id, action="typing", )  # —ç—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        await message.answer("<b>–í–∞—à –∑–∞–∫–∞–∑:</b>\n\n"
                             f"{choice} {quantity}—à—Ç {choice_price}‚ÇΩ\n\n"
                             f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ {int(quantity) * choice_price}‚ÇΩ", parse_mode='HTML')
        await message.answer("–ï—â–µ —á–µ–≥–æ –Ω–∏ –±—É–¥—å?", reply_markup=consent)
        await state.finish()
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä–∞–º–∏")
        await state.set_state("quantity")