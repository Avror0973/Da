from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline.choice_buttons import choice
from aiogram.types import message, CallbackQuery
from re import match

from loader import dp, db


@dp.callback_query_handler(text_contains="yes_set")
async def new_delivery(call: CallbackQuery, state: FSMContext):
    await call.answer(cache_time=60)
    await call.message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë –∏–º—è —á—Ç–æ–±—ã –º—ã –∑–Ω–∞–ª–∏ –∫–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è"
                              "\n\n–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –Ω–∞–∂–º–∏ –Ω–∞ /skip")
    await state.set_state("name")


@dp.message_handler(state="name")
async def enter_email(message: types.Message, state: FSMContext):
    name = message.text
    user_name = message.from_user.full_name
    if name == '/skip':
        await message.answer(f"–õ–∞–¥–Ω–æ, –±—É–¥–µ–º –∑–≤–∞—Ç—å –≤–∞—Å {user_name.capitalize()}")
        db.update_user_name(name=user_name, id=message.from_user.id)
        await message.answer(f"{user_name.capitalize()} –≤–∞—à –Ω–æ–º–µ—Ä –º—ã –º–æ–∂–µ–º —É–∑–Ω–∞—Ç—å?"
                             f"\n\n–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞ –º–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ /skip")
        await state.set_state("number")

    else:
        db.update_user_name(name=name, id=message.from_user.id)
        await message.answer(f"{name.capitalize()}, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –Ω–æ–º–µ—Ä."
                             f"\n\n–ï—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ ‚û°Ô∏è /skip")
        await state.set_state("number")


@dp.message_handler(state="number")
async def enter_email(message: types.Message, state: FSMContext):
    number = message.text

    if number == '/skip':
        await message.answer("–ù—É –ª–∞–¥–Ω–æ, –±—É–¥–µ–º —Å—Ç—É—á–∞—Ç—å—Å—è –≤ –¥–≤–µ—Ä—å)")
        await message.answer("–ê –∞–¥—Ä–µ—Å –º—ã –º–æ–∂–µ–º —É–∑–Ω–∞—Ç—å?"
                             "\n\n –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ /skip")
        await state.set_state("adress")

    elif (match(r'[+7]{1}[0-9]{9}', number) and len(number) == 12) or match(r'[8]{1}[0-9]{9}', number) and len(number) == 11:
        db.update_user_number(number=number, id=message.from_user.id)
        await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–µ–Ω –≤–∞—à –∞–¥—Ä–µ—Å.\n–ë—É–¥–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ –µ—Å–ª–∏ –≤—ã —É–∫–∞–∂–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ä–∞–π–æ–Ω–æ–º."
                             "\n\n –î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–∂–∏–º–∞–π –Ω–∞ /skip")
        await state.set_state('adress')

    else:
        await message.answer("–í—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ\n"
                             "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ –æ–±—Ä–∞–∑—Ü—É –Ω–∏–∂–µ: \n"
                             "+79281112233 –∏–ª–∏ 89281112233")
        await state.set_state("number")


@dp.message_handler(state="adress")
async def enter_email(message: types.Message, state: FSMContext):
    adress = message.text
    if adress == '/skip':
        await message.answer("–ù—É –≤—ã –¥–∞—ë—Ç–µüòê\n–ö–∞–∫ –º—ã –ø–æ –≤–∞—à–µ–º—É –¥–æ–ª–∂–Ω—ã –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –µ–¥—É?", reply_markup=choice)
        await state.finish()

    else:
        db.update_user_email(email=adress, id=message.from_user.id)
        user = db.select_user(id=message.from_user.id)
        user_data = []
        for i in user[1:]:
            if i == None:
                user_data.append("- –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω")
            else:
                user_data.append(i)
        text = (
            "<b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:</b>",
            f"üë§ –ò–º—è: {user_data[0]}",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {user_data[1]}",
            f"üì™ –ê–¥—Ä–µ—Å: {user_data[2]}"
        )
        await message.answer("\n".join(text), parse_mode='HTML', reply_markup=choice)
        await state.finish()


@dp.callback_query_handler(text_contains="no_set")
async def new_delivery(call: CallbackQuery):
    await call.answer(cache_time=60)
    await call.message.answer("–ù—É –ª–∞–¥–Ω–æ(", reply_markup=choice)